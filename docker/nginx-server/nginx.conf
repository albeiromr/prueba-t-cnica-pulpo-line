# Esta configuración está diseñada para optimizar el rendimiento al servir el resultado del build 
# de una aplicación Angular, utilizando gzip para comprimir los archivos y asegurando que el 
# index.html al usar un aplicacion SPA(single page application).
# -----------------------------------------------------------------------------------------------




# Define un bloque de configuración para un servidor virtual. 
# Todo lo que está dentro de este bloque aplica a una 
# configuración específica para un servidor o dominio.
server{
    # Indica que el servidor de Nginx escuchará en el puerto 80, que es el puerto estándar para HTTP.
    listen 80;

    # Activa la opción sendfile, que permite a Nginx usar la llamada al sistema sendfile() para servir
    # archivos de manera más eficiente. Esto puede mejorar el rendimiento al servir archivos estáticos.
    sendfile on;

    # Establece el tipo de contenido predeterminado para los archivos que Nginx sirve.
    # application/octet-stream es un tipo de contenido genérico para archivos binarios. 
    # Aunque, en la mayoría de los casos, este ajuste no afecta a los archivos estáticos 
    # si los tipos de contenido están correctamente configurados.
    default_type application/octet-stream;

    # Activa la compresión gzip para reducir el tamaño de las respuestas HTTP, lo que puede
    # mejorar el rendimiento y reducir el uso del ancho de banda.
    gzip on;

    # Establece la versión mínima de HTTP para la que se aplica la compresión gzip. En este caso,
    # la compresión se aplica a HTTP 1.1 y versiones superiores.
    gzip_http_version 1.1;

    # Desactiva la compresión gzip para las versiones de Internet Explorer del 1 al 6, que tienen 
    # problemas de compatibilidad con gzip.
    gzip_disable      "MSIE [1-6]\.";

    # Define el tamaño mínimo de los archivos para que sean comprimidos con gzip. Los archivos 
    # menores de 256 bytes no se comprimirán.
    gzip_min_length   256;

    # Habilita el encabezado Vary: Accept-Encoding, lo que permite a los proxies intermedios y 
    # a los navegadores almacenar versiones comprimidas y no comprimidas del contenido.
    gzip_vary         on;

    # Configura la compresión gzip para las respuestas que se envían a los clientes cuando se usan 
    # proxies. Esto incluye respuestas que están expiradas, no-cache, no-store, privadas o que 
    # requieren autenticación.
    gzip_proxied      expired no-cache no-store private auth;

    # Especifica los tipos MIME de archivos que deben ser comprimidos con gzip. Incluye varios tipos
    # de archivos comunes como texto plano, CSS, JSON, JavaScript y XML.
    gzip_types        text/plain text/css application/json application/javascript application/x-javascript text/xml application/xml application/xml+rss text/javascript;

    # Define el nivel de compresión de gzip, donde 1 es la menor compresión y 9 es la mayor. Un nivel
    # más alto proporciona una mejor compresión, pero puede ser más lento.
    gzip_comp_level   9;

    # Establece el directorio raíz desde el cual Nginx servirá los archivos. En este caso, se 
    # usa /usr/share/nginx/html, que es una ubicación común para archivos estáticos en una 
    # configuración de Nginx estándar.
    root /usr/share/nginx/html;

    # Define cómo manejar las solicitudes para la raíz del sitio y cualquier URL
    location / {

      # Intenta servir el archivo correspondiente a la URL solicitada ($uri). Si no se encuentra,
      # intenta servir el directorio correspondiente ($uri/). Si aún no se encuentra, sirve 
      # index.html (esto es útil para aplicaciones de una sola página como Angular). Si no se 
      # puede servir el archivo, devuelve un error 404.
      try_files $uri $uri/ /index.html =404;
    }
}